// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlineInternshipPortal.Models.Data.OnlineInternshipContext;

namespace OnlineInternshipPortal.Migrations
{
    [DbContext(typeof(OnlineInternshipContext))]
    [Migration("20210917075028_New_migration")]
    partial class New_migration
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("dbo")
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .IsClustered(false);

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .IsClustered(false);

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id")
                        .IsClustered(false);

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider")
                        .IsClustered(false);

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("RoleId", "UserId")
                        .IsClustered(false);

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginProvider")
                        .IsClustered(false);

                    b.HasIndex("UserId");

                    b.ToTable("UserTokens");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("HomeTown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<byte[]>("ProfilePic")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Residence")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id")
                        .IsClustered(false);

                    b.HasIndex("GenderId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RegionId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Application", b =>
                {
                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ApprovalId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("CvId")
                        .HasColumnType("int")
                        .HasColumnName("CV_Id");

                    b.Property<DateTime>("DateOfRegistration")
                        .HasColumnType("date");

                    b.Property<string>("InternId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("InternshipId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ApplicationId")
                        .IsClustered(false);

                    b.HasIndex("ApprovalId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CvId");

                    b.HasIndex("InternId");

                    b.HasIndex("InternshipId");

                    b.ToTable("Application");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Company", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyImageId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRegNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyVideoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("companyVideoLink");

                    b.Property<string>("Companywebsite")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength(true);

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("OtherIndustry")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("CompanyId")
                        .IsClustered(false);

                    b.HasIndex("CompanyImageId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SectorId");

                    b.HasIndex("UserId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.CompanyLogo", b =>
                {
                    b.Property<int>("CompanyImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<byte[]>("Image")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("CompanyImageId")
                        .IsClustered(false);

                    b.ToTable("CompanyLogo");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Cv", b =>
                {
                    b.Property<int>("CvId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("CV_Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Filename")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("CvId")
                        .IsClustered(false);

                    b.ToTable("CV");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Designation", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesignationName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("DesignationId")
                        .IsClustered(false);

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Gender", b =>
                {
                    b.Property<int>("GenderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("GenderName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenderId")
                        .HasName("PK_Genders")
                        .IsClustered(false);

                    b.ToTable("Gender");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Guardian", b =>
                {
                    b.Property<int>("GuardianId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength(true);

                    b.Property<int>("GuardianCategoryId")
                        .HasColumnType("int");

                    b.Property<string>("GuardianName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GuardianId")
                        .IsClustered(false);

                    b.HasIndex("GuardianCategoryId");

                    b.ToTable("Guardian");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.GuardianCategory", b =>
                {
                    b.Property<int>("GuardianCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("GuardianCategoryId")
                        .IsClustered(false);

                    b.ToTable("GuardianCategory");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Hired", b =>
                {
                    b.Property<int>("HireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("date");

                    b.Property<string>("InternId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("HireId")
                        .IsClustered(false);

                    b.HasIndex("CompanyId");

                    b.HasIndex("InternId");

                    b.ToTable("Hired");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Industry", b =>
                {
                    b.Property<int>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("industryName");

                    b.HasKey("IndustryId")
                        .IsClustered(false);

                    b.ToTable("Industry");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Intern", b =>
                {
                    b.Property<string>("InternId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("date");

                    b.Property<string>("ContactNumber")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("char(20)")
                        .IsFixedLength(true);

                    b.Property<string>("Course")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("CvId")
                        .HasColumnType("int")
                        .HasColumnName("CV_Id");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<int>("GuardianId")
                        .HasColumnType("int");

                    b.Property<string>("HomeTown")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Photo")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Residence")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SchoolId")
                        .HasColumnType("int");

                    b.Property<string>("StudentIdCardNumber")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("Student_Id_Card_Number");

                    b.HasKey("InternId")
                        .IsClustered(false);

                    b.HasIndex("CvId");

                    b.HasIndex("GenderId");

                    b.HasIndex("GuardianId");

                    b.HasIndex("RegionId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Interns");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Internship", b =>
                {
                    b.Property<string>("InternshipId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Additional_Info");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int?>("CompanyImageId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DeadLineDate")
                        .HasColumnType("date");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<int>("InternshipStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PostedDate")
                        .HasColumnType("date");

                    b.Property<string>("PostedTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("PublicizeId")
                        .HasColumnType("int");

                    b.Property<int>("RemoteId")
                        .HasColumnType("int");

                    b.Property<string>("SkillsRequired")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WhoCanApply")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WorkDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("InternshipId")
                        .IsClustered(false);

                    b.HasIndex("CompanyId");

                    b.HasIndex("CompanyImageId");

                    b.HasIndex("IndustryId");

                    b.HasIndex("InternshipStatusId");

                    b.HasIndex("PublicizeId");

                    b.HasIndex("RemoteId");

                    b.ToTable("Internship");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.InternshipApproval", b =>
                {
                    b.Property<int>("ApprovalId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ApprovalId")
                        .IsClustered(false);

                    b.ToTable("InternshipApproval");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.InternshipStatus", b =>
                {
                    b.Property<int>("InternshipStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("InternshipStatusId")
                        .IsClustered(false);

                    b.ToTable("InternshipStatus");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.MsgReadStatus", b =>
                {
                    b.Property<int>("MsgReadStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("MsgReadStatusName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("MsgReadStatusId")
                        .IsClustered(false);

                    b.ToTable("MsgReadStatus");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Publicize", b =>
                {
                    b.Property<int>("PublicizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("PublicizeId")
                        .IsClustered(false);

                    b.ToTable("Publicize");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.RecievedMsgFromCompany", b =>
                {
                    b.Property<string>("RecieveId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("InternId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Messagebody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MsgReadStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("date");

                    b.Property<int>("ReceivedStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ReceivedTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("subject");

                    b.HasKey("RecieveId")
                        .IsClustered(false);

                    b.HasIndex("CompanyId");

                    b.HasIndex("InternId");

                    b.HasIndex("MsgReadStatusId");

                    b.HasIndex("ReceivedStatusId");

                    b.ToTable("RecievedMsgFromCompany");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.RecievedStatus", b =>
                {
                    b.Property<int>("ReceivedStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ReceiveStatusName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("ReceivedStatusId")
                        .IsClustered(false);

                    b.ToTable("RecievedStatus");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Region", b =>
                {
                    b.Property<int>("RegionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("RegionName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("RegionId")
                        .IsClustered(false);

                    b.ToTable("Region");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Remote", b =>
                {
                    b.Property<int>("RemoteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("RemoteId")
                        .IsClustered(false);

                    b.ToTable("Remote");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.School", b =>
                {
                    b.Property<int>("SchoolId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SchoolId")
                        .IsClustered(false);

                    b.ToTable("School");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("SectorId")
                        .IsClustered(false);

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.SentMsgToHiredIntern", b =>
                {
                    b.Property<string>("SentId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Attachments")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("InternId")
                        .IsRequired()
                        .HasMaxLength(450)
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Messagebody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SentDate")
                        .HasColumnType("date");

                    b.Property<int>("SentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("SentTime")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)")
                        .HasColumnName("subject");

                    b.HasKey("SentId")
                        .IsClustered(false);

                    b.HasIndex("CompanyId");

                    b.HasIndex("InternId");

                    b.HasIndex("SentStatusId");

                    b.ToTable("SentMsgToHiredInterns");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.SentStatus", b =>
                {
                    b.Property<int>("SentStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("SentStatusId")
                        .IsClustered(false);

                    b.ToTable("SentStatus");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.VerifyCategory", b =>
                {
                    b.Property<int>("VerifyCategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("VerifyName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("VerifyCategoryId")
                        .IsClustered(false);

                    b.ToTable("verifyCategory");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.VerifyCompany", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("VerifyCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CompanyId", "VerifyCategoryId")
                        .IsClustered(false);

                    b.HasIndex("VerifyCategoryId");

                    b.ToTable("VerifyCompany");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.ViewModel.ApplicationViewModel", b =>
                {
                    b.Property<string>("ApplicationId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ApprovalId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CvId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfApplication")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternshipId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ApplicationId");

                    b.ToTable("ApplicationViewModel");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.ViewModel.CompanyViewModel", b =>
                {
                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("CompanyAddress")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("CompanyImageId")
                        .HasColumnType("int");

                    b.Property<string>("CompanyLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyRegNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyVideoLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Companywebsite")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DesignationId")
                        .HasColumnType("int");

                    b.Property<int>("IndustryId")
                        .HasColumnType("int");

                    b.Property<string>("OtherIndustry")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<int>("SectorId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyId");

                    b.ToTable("CompanyViewModel");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.ViewModel.DesignationViewModel", b =>
                {
                    b.Property<int>("DesignationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("DesignationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DesignationId");

                    b.ToTable("DesignationViewModel");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.ViewModel.HiredInternsViewModel", b =>
                {
                    b.Property<int>("HireId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("InternId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("HireId");

                    b.ToTable("HiredInternsViewModel");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.ViewModel.IndustryViewModel", b =>
                {
                    b.Property<int>("IndustryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IndustryId");

                    b.ToTable("IndustryViewModel");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.ViewModel.ReceivedMsgFromCompanyViewModel", b =>
                {
                    b.Property<string>("RecieveId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Attachments")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompanyId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InternId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Messagebody")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MsgReadStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReceivedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReceivedStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ReceivedTime")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SentStatusId")
                        .HasColumnType("int");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RecieveId");

                    b.ToTable("ReceivedMsgFromCompanyViewModel");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.ViewModel.UserRoleViewModel", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoleId");

                    b.ToTable("UserRoleViewModel");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.ViewModel.UsersViewModel", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FullName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenderId")
                        .HasColumnType("int");

                    b.Property<string>("HomeTown")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("ProfilePic")
                        .HasColumnType("varbinary(max)");

                    b.Property<int>("RegionId")
                        .HasColumnType("int");

                    b.Property<string>("Residence")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UsersViewModel");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.ApplicationUser", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Gender", "Gender")
                        .WithMany()
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Application", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.InternshipApproval", "Approval")
                        .WithMany("Applications")
                        .HasForeignKey("ApprovalId")
                        .HasConstraintName("FK_InternshipApproval_Application")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Company", "Company")
                        .WithMany("Applications")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Company_Application")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Cv", "Cv")
                        .WithMany("Applications")
                        .HasForeignKey("CvId")
                        .HasConstraintName("FK_CV_Application")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Intern", "Intern")
                        .WithMany("Applications")
                        .HasForeignKey("InternId")
                        .HasConstraintName("FK_Interns_Application")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Internship", "Internship")
                        .WithMany("Applications")
                        .HasForeignKey("InternshipId")
                        .HasConstraintName("FK_Internship_Application")
                        .IsRequired();

                    b.Navigation("Approval");

                    b.Navigation("Company");

                    b.Navigation("Cv");

                    b.Navigation("Intern");

                    b.Navigation("Internship");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Company", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.CompanyLogo", "CompanyImage")
                        .WithMany("Companies")
                        .HasForeignKey("CompanyImageId")
                        .HasConstraintName("FK_CompanyLogo_Company");

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Designation", "Designation")
                        .WithMany("Companies")
                        .HasForeignKey("DesignationId")
                        .HasConstraintName("FK_Designation_Company")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Industry", "Industry")
                        .WithMany("Companies")
                        .HasForeignKey("IndustryId")
                        .HasConstraintName("FK_Industry_Company")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Region", "Region")
                        .WithMany("Companies")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Region_Company")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Sector", "Sector")
                        .WithMany("Companies")
                        .HasForeignKey("SectorId")
                        .HasConstraintName("FK_Sector_Company")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("CompanyImage");

                    b.Navigation("Designation");

                    b.Navigation("Industry");

                    b.Navigation("Region");

                    b.Navigation("Sector");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Guardian", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.GuardianCategory", "GuardianCategory")
                        .WithMany("Guardians")
                        .HasForeignKey("GuardianCategoryId")
                        .HasConstraintName("FK_GuardianCategory_Guardian")
                        .IsRequired();

                    b.Navigation("GuardianCategory");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Hired", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Company", "Company")
                        .WithMany("Hireds")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Company_Hired")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Intern", "Intern")
                        .WithMany("Hireds")
                        .HasForeignKey("InternId")
                        .HasConstraintName("FK_Interns_Hired")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Intern");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Intern", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Cv", "Cv")
                        .WithMany("Interns")
                        .HasForeignKey("CvId")
                        .HasConstraintName("FK_CV_Interns")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Gender", "Gender")
                        .WithMany("Interns")
                        .HasForeignKey("GenderId")
                        .HasConstraintName("FK_Genders_Interns")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Guardian", "Guardian")
                        .WithMany("Interns")
                        .HasForeignKey("GuardianId")
                        .HasConstraintName("FK_Guardian_Interns")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Region", "Region")
                        .WithMany("Interns")
                        .HasForeignKey("RegionId")
                        .HasConstraintName("FK_Region_Inte15")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.School", "School")
                        .WithMany("Interns")
                        .HasForeignKey("SchoolId")
                        .HasConstraintName("FK_School_Interns")
                        .IsRequired();

                    b.Navigation("Cv");

                    b.Navigation("Gender");

                    b.Navigation("Guardian");

                    b.Navigation("Region");

                    b.Navigation("School");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Internship", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Company", "Company")
                        .WithMany("Internships")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Company_Internship");

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.CompanyLogo", "CompanyImage")
                        .WithMany("Internships")
                        .HasForeignKey("CompanyImageId")
                        .HasConstraintName("FK_CompanyLogo_Internship");

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Industry", "Industry")
                        .WithMany("Internships")
                        .HasForeignKey("IndustryId")
                        .HasConstraintName("FK_Industry_Internship")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.InternshipStatus", "InternshipStatus")
                        .WithMany("Internships")
                        .HasForeignKey("InternshipStatusId")
                        .HasConstraintName("FK_InternshipStatus_Internship")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Publicize", "Publicize")
                        .WithMany("Internships")
                        .HasForeignKey("PublicizeId")
                        .HasConstraintName("FK_Publicize_Internship")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Remote", "Remote")
                        .WithMany("Internships")
                        .HasForeignKey("RemoteId")
                        .HasConstraintName("FK_Remote_Internship")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CompanyImage");

                    b.Navigation("Industry");

                    b.Navigation("InternshipStatus");

                    b.Navigation("Publicize");

                    b.Navigation("Remote");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.RecievedMsgFromCompany", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Company", "Company")
                        .WithMany("RecievedMsgFromCompanies")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Company_RecievedMsgFromCompany")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Intern", "Intern")
                        .WithMany("RecievedMsgFromCompanies")
                        .HasForeignKey("InternId")
                        .HasConstraintName("FK_Interns_RecievedMsgFromCompany")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.MsgReadStatus", "MsgReadStatus")
                        .WithMany("RecievedMsgFromCompanies")
                        .HasForeignKey("MsgReadStatusId")
                        .HasConstraintName("FK_MsgReadStatus_RecievedMsgFromCompany")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.RecievedStatus", "ReceivedStatus")
                        .WithMany("RecievedMsgFromCompanies")
                        .HasForeignKey("ReceivedStatusId")
                        .HasConstraintName("FK_RecievedStatus_RecievedMsgFromCompany")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Intern");

                    b.Navigation("MsgReadStatus");

                    b.Navigation("ReceivedStatus");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.SentMsgToHiredIntern", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Company", "Company")
                        .WithMany("SentMsgToHiredInterns")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Company_SentMsgToHiredInterns")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Intern", "Intern")
                        .WithMany("SentMsgToHiredInterns")
                        .HasForeignKey("InternId")
                        .HasConstraintName("FK_Interns_SentMsgToHiredInterns")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.SentStatus", "SentStatus")
                        .WithMany("SentMsgToHiredInterns")
                        .HasForeignKey("SentStatusId")
                        .HasConstraintName("FK_SentStatus_SentMsgToHiredInterns")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("Intern");

                    b.Navigation("SentStatus");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.VerifyCompany", b =>
                {
                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Company", "Company")
                        .WithMany("VerifyCompanies")
                        .HasForeignKey("CompanyId")
                        .HasConstraintName("FK_Company_VerifyCompany")
                        .IsRequired();

                    b.HasOne("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.VerifyCategory", "VerifyCategory")
                        .WithMany("VerifyCompanies")
                        .HasForeignKey("VerifyCategoryId")
                        .HasConstraintName("FK_verifyCategory_VerifyCompany")
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("VerifyCategory");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Company", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Hireds");

                    b.Navigation("Internships");

                    b.Navigation("RecievedMsgFromCompanies");

                    b.Navigation("SentMsgToHiredInterns");

                    b.Navigation("VerifyCompanies");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.CompanyLogo", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Internships");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Cv", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Interns");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Designation", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Gender", b =>
                {
                    b.Navigation("Interns");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Guardian", b =>
                {
                    b.Navigation("Interns");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.GuardianCategory", b =>
                {
                    b.Navigation("Guardians");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Industry", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Internships");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Intern", b =>
                {
                    b.Navigation("Applications");

                    b.Navigation("Hireds");

                    b.Navigation("RecievedMsgFromCompanies");

                    b.Navigation("SentMsgToHiredInterns");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Internship", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.InternshipApproval", b =>
                {
                    b.Navigation("Applications");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.InternshipStatus", b =>
                {
                    b.Navigation("Internships");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.MsgReadStatus", b =>
                {
                    b.Navigation("RecievedMsgFromCompanies");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Publicize", b =>
                {
                    b.Navigation("Internships");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.RecievedStatus", b =>
                {
                    b.Navigation("RecievedMsgFromCompanies");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Region", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Interns");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Remote", b =>
                {
                    b.Navigation("Internships");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.School", b =>
                {
                    b.Navigation("Interns");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.Sector", b =>
                {
                    b.Navigation("Companies");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.SentStatus", b =>
                {
                    b.Navigation("SentMsgToHiredInterns");
                });

            modelBuilder.Entity("OnlineInternshipPortal.Models.Data.OnlineInternshipContext.VerifyCategory", b =>
                {
                    b.Navigation("VerifyCompanies");
                });
#pragma warning restore 612, 618
        }
    }
}
